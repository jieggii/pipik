#!/bin/env python

import json
import argparse
import sys

DEFAULT_INPUT_PATH = "./texts.json"
DEFAULT_OUTPUT_PATH = "./src/texts.cpp"

MAX_TEXT_LENGTH = 32
MAX_TEXTS_COUNT = 255


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", type=str, default=DEFAULT_INPUT_PATH)

    return parser.parse_args()


args = parse_args()
texts_definition = ""
texts_enumeration = ""
texts_count = 0

validation_failed = False

with open(args.input, "r") as input_file:
    texts = json.load(input_file)
    for i, text in enumerate(texts):
        if len(text) > MAX_TEXT_LENGTH:
            print(f'validation error: text "{text}" with index = {i} is longer that 32 symbols', file=sys.stderr)
            validation_failed = True
        elif len(text) == 0:
            print(f"validation error: text with index {i} is empty", file=sys.stderr)
            validation_failed = True

        var_name = f"TEXT_{i}"
        texts_definition += f'const char {var_name}[] PROGMEM = "{text}";\n'
        texts_enumeration += f"\t{var_name},\n"
        texts_count += 1

    if texts_count > MAX_TEXTS_COUNT:
        print(f"validation error: number of texts is more than {MAX_TEXTS_COUNT}")
        validation_failed = True

    if validation_failed:
        sys.exit(1)


output_content = f"""/*
 * This file was generated by generate-texts.py script, DO NOT EDIT MANUALLY!
*/
 

#include "avr/pgmspace.h"

#include "texts.h"

{texts_definition}
const char *const TEXTS[] PROGMEM = {{
{texts_enumeration}
}};

const uint8_t TEXTS_COUNT = {texts_count};
"""

print(output_content, file=sys.stdout)
